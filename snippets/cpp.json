{
  "throw": {
    "prefix": "throw",
    "body": [
      "throw"
    ],
    "description": "Code snippet for 'throw'"
  },
  "break": {
    "prefix": "break",
    "body": [
      "break;"
    ],
    "description": "Code snippet for 'break'"
  },
  "nullptr": {
    "prefix": "nullptr",
    "body": [
      "nullptr"
    ],
    "description": "Code snippet for 'nullptr'"
  },
  "return": {
    "prefix": "return",
    "body": [
      "return"
    ],
    "description": "Code snippet for 'return'"
  },
  "for": {
    "prefix": "for",
    "body": [

      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"

  },

  "forr": {
    "prefix": "forr",
    "body": [
      "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": ["do", "{", "\t$0", "} while($1);"],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while ($1)", "{", "\t$0", "}"],
    "description": ""
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for(${1:auto} ${2:var} : ${3:collection_to_loop})", "{", "\t$0", "}"],
    "description": "Code snippet for range-based for loop (c++11) statement"
  },
  "if": {
    "prefix": "if",
    "body": ["if ($1)",
      "{", "\t$0", "}"],
    "description": "Code snippet for if statement"

  },

  "else": {
    "prefix": "else",
    "body": ["else",
      "{", "\t$0", "}"],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "else if",
    "body": ["else if ($1)",
      "{", "\t$0", "}"],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum}",
      "{", "\t$2", "};"],
    "description": "Code snippet for enum"
  },
  "enum class": {
    "prefix": "enum class",
    "body": ["enum class ${1:MyClass}",
      "{$2};"],
    "description": "Code snippet for enum class (c++11)"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1();",
      "",
      "private:",
      "\t$2",
      "};",
      "",
      "$1::$1()",
      "{",
      "}",
      "",
      "$1::~$1()",
      "{",
      "}"
    ],
    "description": "Code snippet for class"
  },
  "eclass": {
    "prefix": "eclass",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",

      "\t$2",
      "private:",
      "\t$3",
      "};",
      ""
    ],
    "description": "Code snippet for empty class"
  },
  "qclass": {
    "prefix": "qclass",
    "body": [
      "class ${1:MyClass} : public QObject",
      "{",
      "\tQ_OBJECT;",
      "public:",
      "\nexplicit $1(QObject *parent = nullptr);",
      "\t$2",
      "signals:",
      "",
      "public slots:",
      "};",
      ""
    ],
    "description": "Code snippet for empty Qt class"
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1() = default;",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1() = default;",
      "",
      "private:",
      "\t$2",
      "};"
    ],
    "description": "Code snippet for class with inline constructor/destructor"
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // ${DEBUG}"],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // !$1"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": ["#if ${1:0}", "$0", "#endif // $1"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:MyStruct}", "{", "\t$0", "};"],
    "description": "Code snippet for struct"
  },
  "switch": {

    "prefix": "switch",
    "body": ["switch (${1:switch_on})",
      "{", "\tdefault:", "\t\t$0", "\t\tbreak;", "}"],
    "description": "Code snippet for switch statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "\t",
      "}",

      "catch (const std::exception&)",
      "{",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "cout": {
    "prefix": "cout",
    "body": ["cout << \"${1:message}\" << endl;"],
    "description": "Code snippet for printing to std::cout, provided the header is set"
  },
  "cin": {

    "prefix": "cin",
    "body": ["cin >> $1;"],
    "description": "Code snippet for std::cin, provided the header is set"
  },
  "printf": {
    "prefix": "printf",
    "body": ["printf(\"$1\\n\"$2);"],
    "description": "Generic printf() snippet"
  },
  "scanf": {
    "prefix": "scanf",
    "body": ["scanf(\"$1\"$2);"],
    "description": "Generic scanf() snippet"
  },
  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$0\""],
    "description": "Code snippet for #include \" \""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$0>"],
    "description": "Code snippet for #include < >"
  },
  "#def": {
    "prefix": "#def",
    "body": ["#define $0"],
    "description": "Code snippet for #define \" \""
  },
  "Main function template": {

    "prefix": "main",
    "body": [

      "int main (int argc, char **argv)",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C++ program"
  }
}

